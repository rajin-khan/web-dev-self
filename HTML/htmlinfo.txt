MAIN TUTORIAL FOLLOWED: https://www.youtube.com/watch?v=qz0aGYrrlhU&t=1777s (MOSH HTML COURSE)

(client) browser connects to where the website is hosted (server) - hhtp request
website is displayed - http response

after receiving the response, the browsers constructs the DOM: DOCUMENT OBJECT MODEL
DOM is basically a respresentation of the objects in our html document (basically all the building blocks of your page, like paragraphs, images, etc)
so after constructing the DOM, it knows what it needs to load (render) the page
the browser then sends http requests (in parallel to make things faster) to retrieve information accordingly (html, css, js) and then finally,
renders it.

HTTP STATUS CODES:

200: ALL GOOD/OKAY

HTML VALIDATOR:
https://validator.w3.org/

CSS VALIDATOR:
https://jigsaw.w3.org/css-validator

FREE IMAGE RESOURCE:
https://unsplash.com/

FREE VIDEO RESOURCE:
https://pexels.com

USEFUL RESOURCE TO KNOW WHICH BROWSERS SUPPORT WHICH HTML/CSS FEATURE:
https://caniuse.com

IF YOU OPEN A BLANK HTML FILE, TYPE "!", AND HIT TAB, YOU GET BASIC HTML BOILERPLATE

provide good description for images (SEO TIP)
add alt text too, because if image can't be loaded, alt text is shown

you can add a "comment" or so to speak, in html, by using the <!> tag anything inside <! efiubfikbr> like this, will be ignored by the browser.

html files start or have the main page at index.html

image tags usually include an src (source), and an alt (alternative text).
images that are put in src inside the img tag have their location specified with respect to the html file. for example in T1's index.html,
it was in images/food.png

doctype declarations are usually all caps, but everything else is small, conventionally.

if you set the border radius of an image to exactly half its size, so if the img is 100px, and the border rad is 50px,
you get a perfect circle.

each attribute can be assigned to a different class for styling rules.
for example, if a paragraph element is assigned a class called username, like this: <p class="username">
then in the style part"../../SELF_WEB_DEV/HTML", we can create a section for p.username, or just .username, so that all elements assigned to username class are affected.

The emphasis <em></em> tag, strong <strong> tag, should not be used to change style properties, it simply emphasises so browsers know which keywords 
are most important. we can change how these items look in the style sheet.

Tags like <b> and <i> are considered deprecated.

in HTML body, we have 6 heading elements.
h1, h2, h3, and so on and so forth until h6.
they create hierarchy, NOT a difference in size. It is a matter of importance and how the browser views these elements in terms of importance

angled brackets, <> and other reserved keywords in html cannot be written without using HTML entities. (&;)
For example, if we wanted to write <HTML> in the body, we would have to replace it with:
&lt;HTML&gt; where &lt; stands for greater than (the left angle bracket) and &gt; stands for greater than (the right angle bracket.)

another common html entity is the copyright symbol, &copy;
you can find a full list here:
https://dev.w3.org/html5/spec-LC/named-character-references.html

to generate dummy text, inside a p tag, we type lorem followed by the number of words (no space), like this: lorem100
another html entity is a non breaking space, denoted by &nbsp;
basically say you have two words, a and b, and you always want them to be on the same line. then you would want to put: a&nbsp;b so that regardless of
zoom or cutoff they remain on the same line.

editor wrap in vscode is enabled/disabled by: ‚å•z 

we can use hyperlinks using anchor elements: <a> tag
they look like this:
<a href=""></a>
the href part "../../SELF_WEB_DEV/HTML"is the hyperlink.
when using hyperlinks, we can use a relative, or an absolute URL. relative obv relative to the current html file.
absolute URLS begin with /, where "/" indicates the root of the folder.
in hyperlinks, we can use text, or images.

to make an element downloadable, we can add a download attribute to our anchor element (literally the word download after the href part).

we can link to other parts of the page too (may be useful when creating buttons to bring up separate pages of books for your library project)
shown in t5. (using # and an identifier. just # means top of the page.)

we can link to other websites too, just use https:// before the links in the href.
to make links open in a new tab, just add a "target" attribute after href, and set it to: target="_blank"

for images, you want to serve smaller sizes/resolutions on mobile devices, and obviously larger ones on desktop (to be discussed later).
we want to give good alt texts/descriptions to our images so search engines can better understand and optimize our pages, as mentioned earlier.
for most image fitting scenarios, we use object-fit: cover;

for embedding videos, just use the videos tag, src with the relative URL, and then add a controls attribute before src.
controls is a boolean attribute. it being present means video controls are shown, while it not being present means controls are not shown.
in html, all boolean attributes work like this. you cannot separately set them to true or false.
you can also add the autoplay attribute to make it, obv, autoplay (also boolean).
another boolean attribute for video is loop.

when embedding videos in the video tag, also include a fallback message inside the tag in case video is not supported (best practice). (IN T7).

for embedding audio, you use the audio tag (exactly like videos). Furthermore, you can use all the boolean attributes mentioned for videos in audio.

lists:

unordered lists, <ul> tag, are commonly used when creating navigation menus, display images, shopping lists, etc.
inside these unordered lists, you can put in list elements using the <li> tag. (you can use li*3/4/5 etc to generate the number of list items quickly)
you can create hierarchy in the list items too
as shown in T8.

int contrast, we have ordered lists, <ol> tag, where the order in which the order of items matter. (T9)
you can create things even quicker with the shorthand: ol>li*3
which means an ordered list, with 3 list items in it. you can do the same for ul, obv.

then, we have description lists,  for implementing glossaries/showing metadata.
for this, we use the <dl> tag.
inside the list, we can have a description term, using <dt>.
after which, we can have a description detail element, using <dd>. (T10)

i have found out that for these things, a common shorthand is: dl>dt>dd*3 (like this, you have a dl element, with a dt element in it, and 3 dd elements in the dt part"../../SELF_WEB_DEV/HTML").

then, we have the table elements (T11) (for displaying tabular data).
we create tables using the <table> tag.
inside tables, we can have 1 or more rows, using <tr> tag.
inside rows, you can have 1 or more cells (data/header).
to define a data cell, we use the <td> tag.
to define a header cell, we use the <th> tag.

now, we could just make tables like this, but it's better to put headers inside the <thead> tag, and the rest of the table in the <tbody> tag. (SEO tip).
this is also called semantic html.

containers are used to create sections of webpages like the nav panel, the welcome section, so on and so forth.

in html, we have quite a few container elements. the one used most often is the div/division element, using the <div> tag.
a div is a block level element. this means it will always start on a new line and take up the entire width of the page.

we also have another generic container element, called the span element, which is often used for styling text.
for example, if we wanted to wrap a text in a div, it might create problems as div is a block level element. this is where we use span.
span is an inline element, not a block level one. so it doesn't take up the entire width of the page.

There are more container elements which are a lot more descriptive.

divs and spans are generic containers.
there are more, like semantic elements (T14).

first example, article element, using the <article> tag. not just used for article, but rather any self contained independent element.
examples include blogposts, reviews, user posts, product cards, etc.

these article elements can contain anything, from lists, to tables, and more often than not, we can use the figure element, again, to make
browsers understand our code better. it uses the <figure> tag, and inside it, we can place something, say, like an image, and then add a caption for that
using the <figcaption> tag.

in html5, similar to how we had to go through a lot of trouble and edit css properties to highlight the text using span/divs, we have a separate markup
element for that reason only, called the mark element, used by the <mark> tag.

T15

STRUCTURING A WEBPAGE

most webpages have three building blocks.

<header>
in header, you can have <nav> for the navigation bar
inside the nav bar, you can have unordered lists
<main> (content)
the main part "../../SELF_WEB_DEV/HTML"can have <section>(s)
the sections can have <article>(s), and that itself can have <header>(s), <footer>(s), and <section>(s).
after main, you can have <aside> (for ads and other unimp stuff)
<footer>

there is no exact way to structure a webpage. there are just common and best practices.

so, we use the main element to represent the main content of the webpage.
HOWEVER, EACH WEB PAGE CAN ONLY HAVE O N E MAIN ELEMENT. IF WE HAVE MORE THAN ONE, OUR WEBPAGE WILL GET A VALIDATION ERROR.

we use the section element to group related content.

we use the header element to represent introductory content (which can belong to a page, or a section, or an article).

the footer element can be used in the same way.

and finally, the aside element is used to represent content not directly related to the main content.

official summary notes pdf from MOSH's course are in this folder.